const preval = require("babel-plugin-preval/macro");

const { dirs, nonAutogenContent } = preval`

  const { dirs, nonAutogenContent } = require("./compileLinkMap.js");

  module.exports = { dirs, nonAutogenContent }
`;

/*
  getLinkType(href)

  - Take an absolute URL (not including domain name) and determine if it
    is an autogenerated content link, a regular website link, or a catalog link
*/

const getLinkType = ({ currentURL, href }) => {
  const defaultReturn = {
    isWebsiteLink: false,
    isContentLink: false,
    isCatalogLink: false,
    isExternalLink: false,
    isAnchorLink: false,
    resolvedHref: href,
  };

  if (!href) {
    return {
      ...defaultReturn,
    };
  }

  if (href.includes("mailto:") || href.includes("#")) {
    return {
      ...defaultReturn,
      isAnchorLink: true,
    };
  } else if (href.startsWith("https://") || href.startsWith("http://")) {
    return {
      ...defaultReturn,
      isExternalLink: true,
    };
  }

  // strip trailing slash since our proxy will do that
  if (href.endsWith("/") && href !== "/") {
    href = href.slice(0, -1);
  }

  var resolvedHref = href;

  if (currentURL) {
    if (currentURL[0] !== "/") {
      // Just in case (unlikely to ever happen if using next router)
      currentURL = `/${currentURL}`;
    }

    // If href is relative (includes any number of ../ et. al.), this will resolve it
    // it's the equivalent of running path.resolve(currentURL, href). We include
    // bogus "host.com" to avoid throwing an error
    resolvedHref = new URL(href, `https://host.com${currentURL}`).pathname;
    href = resolvedHref;
  }

  const isWebsiteLink = href === "/" || dirs.includes(href.split("/")[1]);
  const isContentLink = isWebsiteLink && !nonAutogenContent.includes(href);
  const isCatalogLink = !isWebsiteLink;

  return {
    ...defaultReturn,
    isWebsiteLink,
    isContentLink,
    isCatalogLink,
    resolvedHref,
  };
};

module.exports = getLinkType;
