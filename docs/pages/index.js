// @jsx jsx
// @ts-ignore
import { jsx, Box, SystemStyleObject } from "theme-ui";

import React from "react";

import { NextSeo } from "next-seo";

import withTheme from "../hocs/withTheme";
import { LandingPageLayout } from "../components/LandingPageLayout";
import { HeroBox } from "../components/HeroBox";

import { keyframes, css } from "@emotion/core";

import LandingPageSplitfile from "@splitgraph/content/marketing/LandingPageSplitfile.mdx";

import {
  IconConceptContainerCrane,
  IconConceptCow,
  IconConceptDataInPalmOfHand,
  IconConceptMoneyDatabase,
  IconConceptWorkflowGantChart,
  IconPostgresLogo,
  IconComposeImages,
  IconUpdateImages,
  IconUploadDatabase,
  IconFeatureAutogeneratedAPI,
  IconFeatureBigData,
  IconFeatureCommandLineClient,
  IconFeatureContentAddressable,
  IconFeatureCloudStorage,
  IconFeatureCache,
  IconFeatureDeltaCompression,
  IconFeatureExtractTransformTransform,
  IconFeatureIntegrateOtherDatabases,
  IconFeatureLayeredQuerying,
  IconFeaturePeerToPeer,
  IconFeaturePythonLogo,
  IconFeatureProvenance,
  IconFeatureSplitfiles,
  IconFeatureVersioning,
} from "@splitgraph/tdesign";

import { Link } from "@splitgraph/docs/components";

/*
  TODO / temp:

    Pasting the marketing theme in here because hot reload is broken
    for top level files like defaultTheme.js. Need to move it somewhere else.

  (This whole file is too big and needs to be refactored)
*/

const prismTheme = {
  color: "#e0ffff",
  // backgroundColor: "#36678d",
  backgroundColor: "red",
  ".changed,.operator": { color: "#ffd700" },
  ".deleted": { color: "#ffa07a77" },
  ".inserted": { color: "#66cc99" },
  ".comment": { color: "#81cfe0", fontStyle: "italic" },
  ".punctuation": { color: "#e0ffff" },
  ".constant": { color: "#dcc6e0" },
  ".string,.url": { color: "#00ff7f" },
  ".variable": { color: "#36d7b7" },
  ".number,.boolean,.attr-value": { color: "#ffecdb" },
  ".attr-name": { color: "#ffb454" },
  ".keyword,.key,.property,.namespace,.tag,.selector,.doctype": {
    color: "#00ffff",
  },
  ".builtin,.char,.constant,.function,.class-name": {
    color: "#ffa07a",
  },
  // Used by shell-session
  ".output": {
    color: "#e0ffff",
  },
  ".important,.language-bash": {
    color: "#ffa07a",
  },
};

const marketingTheme = {
  styles: {
    pre: {
      ...prismTheme,
      padding: "1ch",
      "@media (max-width: 768px)": {
        // marginLeft: -4,
        // marginRight: -4,
        // paddingLeft: "1ch",
        // paddingRight: "1ch",
        // paddingTop: "1rem",
        // paddingBottom: "1rem",
        // borderTop: "4px solid #efefef",
        // borderBottom: "4px solid #efefef",
      },
      // "@media (min-width: 769px)": {
      //   minWidth: "80ch",
      // },
      fontSize: "0.8rem",
      // padding: 10,
      overflowX: "auto",
      MsOverflowStyle: "none",
      // maxWidth:
      backgroundColor: "primary",
      ".mdx-marker": {
        // backgroundColor: "rgba(255,255,255,0.1)",
        display: "block",
        // marginLeft: "-1em",
        // marginRight: "-1em",
        // paddingRight: "1em",
        // paddingLeft: "1em",
        borderLeft: `.25em solid ${prismTheme[".punctuation"].color}`,
      },
    },
    inlineCode: {
      ...prismTheme,
      "@media (min-width: 749px)": {
        minWidth: "initial",
      },
      // paddingLeft: "0.5ch",
      // paddingRight: "0.5ch",
      paddingTop: 0,
      paddingBottom: 0,
      minHeight: "1rem",
      display: "inline-flex",
      alignContent: "center",
      overflowX: "auto",
      backgroundColor: "primary",
    },
    code: {
      backgroundColor: "primary",
      fontFamily: "monospace",
      fontSize: "inherit",
      span: {
        color: "red",
      },
      ".comment": {
        color: "#f4c1c0",
      },
    },
  },
};

const featureCardStyle = {
  margin: "1rem",
  backgroundColor: "light",
  padding: "1rem",
  boxShadow: "card",
  minWidth: "90vw",
  maxWidth: "90vw",
  border: "1px solid",
  borderColor: "sgdarkblue",
  color: "heavy",
  textAlign: "left",
  h2: {
    color: "sgdarkblue",
  },
};

const exploreRepoBoxStyle = {
  color: "heavy",
  margin: "5px",
  backgroundColor: "light",
  padding: "5px",
  textAlign: "left",
  ".repo-name": {
    color: "sgdarkblue",
  },
};

const mdxComponents = {
  pre: ({ children, ...rest }) => (
    <pre sx={marketingTheme.styles.pre} {...rest}>
      {children}
    </pre>
  ),
  code: ({ children, ...rest }) => (
    <code sx={marketingTheme.styles.code} {...rest}>
      {children}
    </code>
  ),
};

const Typewriter = ({ children }) => {
  const typing = keyframes`
    from { width: 0 }
    to { width: 100% }
  `;

  const blinkCaret = keyframes`
    from, to { border-color: transparent }
    50% { border-color: #2b9abe; }
  `;

  const animateBox = css`
    animation: ${typing} 3.5s steps(40, end),
      ${blinkCaret} 0.75s step-end infinite;
  `;

  return (
    <Box
      {...animateBox}
      sx={{
        display: "inline-flex",
        backgroundColor: "light",
        color: "sgdarkblue",
        maxWidth: "90vw",
        ".text-container": {
          paddingLeft: "1ch",
          paddingRight: "1ch",
          fontSize: ["initial", "initial", "2rem"],
          overflow: "hidden",
          borderRight: ".15em solid #113664",
          whiteSpace: "nowrap",
          margin: "0 auto",
          letterSpacing: ".15em",
          animation: `
    ${typing} 3.5s steps(40, end),
    ${blinkCaret} .75s step-end infinite`,
        },
      }}
    >
      <span className="text-container">
        <pre className="inline-code">{children}</pre>
      </span>
    </Box>
  );
};

const featurePanelStyle = {
  display: "flex",
  flexWrap: "wrap",
  justifyContent: "center",
  // width: "90vw",
  maxWidth: "90vw",
  WebkitBoxPack: "center",
  ".feature:nth-child(even)": {
    marginRight: [0, 0, "4rem"],
    marginLeft: [0, 0, "4rem"],
  },
  ".feature": {
    marginBottom: ["4rem", "4rem", 0],
    // padding: "1rem",
    width: ["100%", "50%", "25%"],
    flexGrow: 0,
    flexShrink: 1,
    // padding: "0.75em 3em",
    // border: "1px solid #000",
    minHeight: "200px",
    h3: {
      marginTop: "2rem",
    },
    p: {
      textAlign: "justify",
    },
    a: {
      variant: "links.primary",
      textDecoration: "underline",
      color: "sgdarkblue",
      borderBottom: "2px solid",
      borderBottomColor: "accent",
      alignSelf: "flex-end",
      ":hover": {
        borderBottom: "3px solid",
      },
    },
  },
};

const LandingPage = () => {
  return (
    <LandingPageLayout>
      <NextSeo title="Work with data like you work with code" />

      <HeroBox>
        <h1>Get your data sorted.</h1>

        <Typewriter>sgr build votes.splitfile</Typewriter>

        <h2>
          Work with data
          <br className="mobile-line-break" /> like you work with code.
        </h2>

        <Box
          sx={{
            backgroundColor: "sgdarkblue",
            color: "white",
            // width: "80ch",
            maxWidth: "90vw",
            boxShadow: "card",
          }}
        >
          <LandingPageSplitfile components={mdxComponents} />
        </Box>

        <br />
      </HeroBox>

      <section
        className="lp-section"
        sx={{
          color: "sgdarkblue",
          background:
            "linear-gradient(180deg, rgba(221,221,223,1) 0%, rgba(255,255,255,1) 72%)",
          paddingLeft: ["1rem", "1rem", "3rem"],
          paddingRight: ["1rem", "1rem", "3rem"],
          paddingBottom: "4rem",
        }}
      >
        <h2>
          Build, combine and share data. <br />
          <br className="mobile-line-break" />{" "}
          <span sx={{ fontWeight: "200" }}>Powered by Postgres.</span>
          <br className="mobile-line-break" />{" "}
          <span sx={{ fontWeight: "200" }}>Inspired by Docker and git.</span>
          <br />
          <br />
        </h2>

        <Box sx={featurePanelStyle}>
          <Box className="feature">
            <IconComposeImages
              size={"6rem"}
              extraStyle={{ display: "inline-flex" }}
            />
            <h3>Build composable data images.</h3>
            <p>
              Splitfiles allow you to use familiar SQL to build{" "}
              <strong>versioned data images</strong>. Merging in{" "}
              <Link href="/explore">public</Link> and internal datasets
              is as easy as referencing them through a <tt>JOIN</tt>.
            </p>
            <Link href="/docs/concepts/splitfiles">
              Learn more about Splitfiles.
            </Link>
          </Box>

          <Box className="feature">
            <IconUpdateImages
              size={"6rem"}
              extraStyle={{ display: "inline-flex" }}
            />
            <h3>Keep data fresh and reproducible.</h3>
            <p>
              With Splitgraph's provenance tracking, you know exactly where your data came from.{" "}
              <strong>Keep data images up-to-date</strong> with a single command
              when the sources change.
            </p>
            <Link href="/docs/working_with_data/inspecting_provenance">
              Learn more about data provenance and rebuilding data images.
            </Link>
          </Box>

          <Box className="feature">
            <IconUploadDatabase
              size={"6rem"}
              extraStyle={{ display: "inline-flex", color: "red" }}
            />
            <h3>Share data with peers.</h3>
            <p>
              Like Git, Splitgraph is peer-to-peer. Push data to any other Splitgraph instance
              or publish it to Splitgraph Cloud, where you get an{" "}
              <strong>instant REST API for every version of your data</strong>.
            </p>
            <Link href="/docs/splitgraph_cloud/introduction">
              Learn more about Splitgraph Cloud.
            </Link>
          </Box>
        </Box>
      </section>

      <section
        className="lp-section lp-cta"
        sx={{
          minWidth: "100%",
          maxWidth: "100%",
          width: "100%",
          backgroundColor: "heavy",
          paddingTop: "3rem",
          paddingBottom: "3rem",
          paddingLeft: ["1rem", "1rem", "3rem"],
          paddingRight: ["1rem", "1rem", "3rem"],
          borderTop: "0.5ch solid",
          borderTopColor: "primary",
          borderBottom: "0.5ch solid",
          borderBottomColor: "primary",
          ".button-link": {
            marginBottom: "2rem",
            fontSize: ["1.5rem", "1.5rem", "2rem"],
          },
          ".muted-link": {
            variant: "links.muted",
          },
        }}
      >
        <Link
          className="button-link"
          href="/docs/getting-started/five_minute_demo"
        >
          Try it in five minutes
        </Link>

        <Link className="muted-link" href="/blog/introduction">
          Read our introductory blog post &raquo;
        </Link>
      </section>

      <section
        className="lp-section"
        sx={{
          color: "sgdarkblue",
          background:
            "linear-gradient(180deg, rgba(221,221,223,1) 0%, rgba(255,255,255,1) 72%)",
          paddingLeft: ["1rem", "1rem", "3rem"],
          paddingRight: ["1rem", "1rem", "3rem"],
          paddingBottom: "4rem",
          textAlign: "center",
          ".feature-box--header": {
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
          },
          ".sg-icon-postgresLogo": {
            marginRight: ["initial", "initial", "1rem"],
          },
        }}
      >
        <Box className="feature-box--header">
          <h2
            sx={{
              display: "flex",
              alignItems: "center",
            }}
          >
            <IconPostgresLogo
              size={"3em"}
              extraStyle={{
                display: "inline-flex",
              }}
            />
            &nbsp;Built with Postgres
          </h2>
        </Box>

        {/* TODO: Make color blue, but then icons need to be blue too */}
        <Box sx={{ ...featurePanelStyle, color: "initial" }}>
          <Box className="feature">
            <IconConceptWorkflowGantChart
              size={"6rem"}
              extraStyle={{ display: "inline-flex" }}
            />
            <h3>Keep your existing tools.</h3>
            <p>
              Anything that works with Postgres will work with Splitgraph. As
              far as your tools are concerned, a Splitgraph image is{" "}
              <strong>just another Postgres database</strong>. You can adopt
              Splitgraph incrementally while keeping your existing workflows and
              benefitting from the Postgres ecosystem.
              {/* It's all part of the core
              philosophy of Splitgraph, to{" "}
              <strong>enhance existing abstractions</strong> without breaking
              them. */}
            </p>
            <Link href="/docs/integrating_splitgraph/dbt">
              See examples of common integrations
            </Link>
          </Box>

          <Box className="feature">
            <IconFeatureIntegrateOtherDatabases
              size={"6rem"}
              extraStyle={{ display: "inline-flex" }}
            />
            <h3>Ingest data from anywhere.</h3>
            <p>
              Forget ETL and BI connectors. Splitgraph leverages the native
              PostgreSQL feature of Foreign Data Wrappers. Use any FDW to import
              data from common databases. Or, write a custom mount handler to
              import data from wherever you need.
            </p>
            <Link href="/docs/ingesting_data/foreign_data_wrappers/introduction">
              Read more about ingesting data with FDWs
            </Link>
          </Box>

          <Box className="feature">
            <IconConceptMoneyDatabase
              size={"6rem"}
              extraStyle={{ display: "inline-flex" }}
            />
            <h3>Save on costs.</h3>
            <p>
              Stop paying for a bulky, always-on data warehouse. Splitgraph data
              can be stored in any S3-compatible object storage and downloaded
              on demand when it needs to be queried.
            </p>
            <Link href="/docs/large_datasets/layered_querying">
              Read about layered querying
            </Link>
          </Box>
        </Box>
      </section>

      <section
        className="lp-section lp-section--darkgrad"
        sx={{
          background:
            "linear-gradient(180deg, rgba(13,24,33,1) 0%, rgba(54,103,141,1) 50%)",
          color: "light",
          borderTop: "0.5ch solid",
          borderTopColor: "primary",
          borderBottom: "0.5ch solid",
          borderBottomColor: "primary",
          paddingTop: "2rem",
          paddingBottom: "2rem",
        }}
      >
        <h2>Explore Public Data</h2>

        <iframe
          src="/explore?embed=1"
          allowtransparency="true"
          style={{
            position: "position: absolute",
            left: 0,
            top: 0,
            minWidth: "100%",
            width: "100%",
            maxHeight: "calc(200px + 1rem)",
            height: "calc(200px + 1rem)",
            border: "none",
            background: "none",
            overflowY: "hidden",
          }}
        />
      </section>

      <section
        className="lp-section"
        sx={{
          paddingBottom: "8rem",
          paddingLeft: ["1rem", "1rem", "max(3rem, calc((100vw - 120ch)/2))"],
          paddingRight: ["1rem", "1rem", "max(3rem, calc((100vw - 120ch)/2))"],
          backgroundColor: "light",
          display: "flex",
          flexDirection: "row",
          justifyContent: "center",
          // width: "90vw",
          // maxWidth: "90vw",
          WebkitBoxPack: "center",
        }}
      >
        <h2 sx={{ marginTop: "2rem", marginBottom: "2rem" }}>
          What's in the box?
        </h2>

        <ul
          sx={{
            padding: 0,
            textAlign: "left",
            display: "flex",
            flexWrap: "wrap",
            flexDirection: "row",
            justifyContent: "space-between",
            maxWidth: "100%",
            li: {
              width: ["100%", "100%", "calc(50% - 2rem)"],
              display: "inline-flex",
              flexDirection: "row",
              alignItems: "center",
              flexGrow: 0,
              flexShrink: 1,
              marginBottom: "1rem",
              marginTop: "1rem",
            },
            "li:nth-child(even)": {
              marginRight: [0, 0, "1rem"],
            },
            "li:nth-child(odd)": {
              marginLeft: [0, 0, "1rem"],
            },
            ".feature-icon": {
              display: "inline-flex",
              alignItems: "center",
              marginRight: "2rem",
              minWidth: "3rem", // must be size of icon
              'div[class^="sg-icon-"]': {
                display: "inline-flex",
              },
            },
            ".feature-body": {
              display: "flex",
              flexDirection: "column",
              ".feature-heading": {
                fontWeight: "bold",
              },
              ".feature-description": {
                textAlign: "justify",
              },
            },
          }}
        >
          {/* Several categories of features. From the POV of the lifecycle of a dataset, we have:
              * Ingestion/creation
                * Ingest data from anywhere
                * Splitfiles?
              * Storage
                * Delta Compression
                * content addressability
                * maybe S3
              * Transformations
                * Extract, transform, transform
                * Provenance?
                * Caching
              * Querying
                * LQ
                * Python
                * Other SQL clients?
              * Big Data?
                * Big-data ready
                * S3 compatible
                * Layered querying
              * Sharing
                * P2P
                * Rest API

            Splitgraph can enhance any part of your data life cycle without forcing you to
            adopt it completely.

          Potential sections:


          # ingestion */}

          <li>
            <Box className="feature-icon">
              <IconFeatureIntegrateOtherDatabases size={"3rem"} />
            </Box>
            <Box className="feature-body">
              <span className="feature-heading">
                Ingest data from anywhere
              </span>
              <span className="feature-description">
                Import data from all major data sources, setup Splitgraph as a
                Postgres replication client, or write a custom mount handler to
                cover your unique use case.
              </span>
            </Box>
          </li>

          {/* # storage */}

          <li>
            <Box className="feature-icon">
              <IconFeatureDeltaCompression size={"3rem"} />
            </Box>
            <Box className="feature-body">
              <span className="feature-heading">Delta Compression</span>
              <span className="feature-description">
                Splitgraph tables are composed of delta compressed objects. Keep track of how
                your data changed through history at low storage cost and bring your datasets
                up to date without redownloading them.
              </span>
            </Box>
          </li>

          <li>
            <Box className="feature-icon">
              <IconFeatureContentAddressable size={"3rem"} />
            </Box>
            <Box className="feature-body">
              <span className="feature-heading">
                Content addressable chunks
              </span>
              <span className="feature-description">
                Splitgraph objects are immutable and content-addressable, letting it automatically
                deduplicate data and store multiple versions efficiently.
                {/* letting you focus on what to put into your data warehouse, not how to store it.*/}
              </span>
            </Box>
          </li>

          <li>
            <Box className="feature-icon">
              <IconFeatureCloudStorage size={"3rem"} />
            </Box>
            <Box className="feature-body">
              <span className="feature-heading">
                S3 Compatible Blob Storage
              </span>
              <span className="feature-description">
                Store only lightweight metadata in a Splitgraph installation and keep
                actual data in S3 compatible storage. Download data only when you need it,
                without having to run a bulky always-on warehouse.
              </span>
            </Box>
          </li>

          {/* # research/management */}

          <li>
            <Box className="feature-icon">
              <IconFeatureVersioning size={"3rem"} />
            </Box>
            <Box className="feature-body">
              <span className="feature-heading">Data Versioning</span>
              <span className="feature-description">
                Switch between different versions of your data, capture changes, send
                and receive revisions and do it without rewriting any of your tools &mdash; just like Git.
              </span>
            </Box>
          </li>

          <li>
            <Box className="feature-icon">
              <IconFeaturePythonLogo size={"3rem"} />
            </Box>
            <Box className="feature-body">
              <span className="feature-heading">Python Library</span>
              <span className="feature-description">
                Interact with Splitgraph repositories and images using the full
                suite of Python data science tools, including Jupyter notebooks
                and Pandas DataFrames.
              </span>
            </Box>
          </li>

          <li>
            <Box className="feature-icon">
              <IconFeatureCommandLineClient size={"3rem"} />
            </Box>
            <Box className="feature-body">
              <span className="feature-heading">Command Line Client</span>
              <span className="feature-description">
                Manage Splitgraph data using a familiar command line interface
                inspired by Docker and Git.
              </span>
            </Box>
          </li>

          {/* # querying */}

          <li>
            <Box className="feature-icon">
              <IconFeatureBigData size={"3rem"} />
            </Box>
            <Box className="feature-body">
              <span className="feature-heading">Big-data Ready</span>
              <span className="feature-description">
                Splitgraph uses a columnar storage format for its data, offering
                a smaller (5x-10x) on-disk footprint and faster read performance
                than PostgreSQL tables.

                {/*Splitgraph tables can be located in
                S3-compatible storage, with only a required subset of the table
                being downloaded.*/}
              </span>
            </Box>
          </li>

          <li>
            <Box className="feature-icon">
              <IconFeatureLayeredQuerying size={"3rem"} />
            </Box>
            <Box className="feature-body">
              <span className="feature-heading">Layered querying</span>
              <span className="feature-description">
                Don't download the whole dataset just to run one <tt>SELECT</tt>. Splitgraph lets
                your software query remote data by lazily downloading only the required fragments.
              </span>
            </Box>
          </li>

          {/* transformations */}

          <li>
            <Box className="feature-icon">
              <IconFeatureSplitfiles size={"3rem"} />
            </Box>
            <Box className="feature-body">
              <span className="feature-heading">Splitfiles</span>
              <span className="feature-description">
                Define transformations on data with declarative syntax that will
                be familiar to anyone who's written a Dockerfile. Reference other
                Splitgraph data images with a simple <tt>JOIN</tt>.
              </span>
            </Box>
          </li>

          <li>
            <Box className="feature-icon">
              <IconFeatureExtractTransformTransform size={"3rem"} />
            </Box>
            <Box className="feature-body">
              <span className="feature-heading">
                Extract, transform, transform
              </span>
              <span className="feature-description">
                Spend less time loading. Spend more time defining
                transformations between self-contained, immutable data images.
              </span>
            </Box>
          </li>

          <li>
            <Box className="feature-icon">
              <IconFeatureProvenance size={"3rem"} />
            </Box>
            <Box className="feature-body">
              <span className="feature-heading">Provenance</span>
              <span className="feature-description">
                Datasets built with Splitfiles have all their sources recorded,
                meaning you know exactly where your data came from and when to rebuild it.
              </span>
            </Box>
          </li>

          <li>
            <Box className="feature-icon">
              <IconFeatureCache size={"3rem"} />
            </Box>
            <Box className="feature-body">
              <span className="feature-heading">Caching</span>
              <span className="feature-description">
                Rebuild data only if the sources have changed. Use Splitfiles in CI to
                keep your data up to date and only download the changes to upstream datasets.
              </span>
            </Box>
          </li>

          {/* # sharing */}

          <li>
            <Box className="feature-icon">
              <IconFeaturePeerToPeer size={"3rem"} />
            </Box>
            <Box className="feature-body">
              <span className="feature-heading">Peer-to-Peer</span>
              <span className="feature-description">
                Any Splitgraph engine can act as a remote.
                Push data between Splitgraph installations or publish it on Splitgraph Cloud.
              </span>
            </Box>
          </li>

          <li>
            <Box className="feature-icon">
              <IconFeatureAutogeneratedAPI size={"3rem"} />
            </Box>
            <Box className="feature-body">
              <span className="feature-heading">Auto-generated API</span>
              <span className="feature-description">
                Get a REST API for every version or tag of your data when you
                push it to Splitgraph Cloud.
              </span>
            </Box>
          </li>
        </ul>
      </section>

      <section
        className="lp-section lp-cta"
        sx={{
          minWidth: "100%",
          maxWidth: "100%",
          width: "100%",
          backgroundColor: "heavy",
          paddingTop: "3rem",
          paddingBottom: "3rem",
          paddingLeft: ["1rem", "1rem", "3rem"],
          paddingRight: ["1rem", "1rem", "3rem"],
          borderTop: "0.5ch solid",
          borderTopColor: "primary",
          borderBottom: "0.5ch solid",
          borderBottomColor: "primary",
          ".button-link": {
            marginBottom: "2rem",
            fontSize: ["1.5rem", "1.5rem", "2rem"],
          },
          ".muted-link": {
            variant: "links.muted",
          },
        }}
      >
        <Link className="button-link" href="/docs/">
          Read the Docs
        </Link>

        <Link
          className="muted-link"
          href="https://www.github.com/splitgraph/splitgraph"
        >
          Visit Splitgraph on GitHub &raquo;
        </Link>
      </section>

      <section
        className="lp-section"
        sx={{
          color: "sgdarkblue",
          background:
            "linear-gradient(180deg, rgba(221,221,223,1) 0%, rgba(255,255,255,1) 72%)",
          paddingLeft: ["1rem", "1rem", "3rem"],
          paddingRight: ["1rem", "1rem", "3rem"],
          paddingBottom: "4rem",
          textAlign: "center",
          ".feature-box--header": {
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
          },
          ".sg-icon-postgresLogo": {
            marginRight: ["initial", "initial", "1rem"],
          },
        }}
      >
        <Box className="feature-box--header">
          <h2
            sx={{
              display: "flex",
              alignItems: "center",
            }}
          >
            Why Splitgraph?
          </h2>
        </Box>

        <Box sx={featurePanelStyle}>
          <Box className="feature">
            <h3>Work with data like you work with code.</h3>
            <p>
              Benefit from familiar conventions and concepts. We took the best
              ideas from our favorite development tools and applied them to the
              domain of data science.
            </p>
            <Link href="/blog/introduction">
              Read our introductory blog post
            </Link>
          </Box>

          <Box className="feature">
            <h3>Build composable data images.</h3>
            <p>
              Write familiar SQL with simple JOINs to combine public and private
              datasets into versioned data images with provenance tracking.
            </p>
            <Link href="/docs/concepts/splitfiles">
              Read more about Splitfiles
            </Link>
          </Box>

          <Box className="feature">
            <h3>Treat your data like cattle.</h3>
            <p>
              Stop wrangling data, and start wrangling databases. There's a
              saying in dev-ops that you should treat your servers like cattle,
              rather than individual pets that demand attention. Use Splitgraph
              to escape the fragility of spaghetti ETL code and deploy
              confidently to production.
            </p>
            <Link href="#">Read about our philosophy</Link>
          </Box>
        </Box>
      </section>
    </LandingPageLayout>
  );
};

export default withTheme(LandingPage);
