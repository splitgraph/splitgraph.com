import { Box, Typography } from "@material-ui/core";

import { NextSeo } from "next-seo";

import withTheme from "../hocs/withTheme";
import { LandingPageLayout } from "../components/LandingPageLayout";
import { HeroBox } from "../components/HeroBox";
import { HeroSampleQuery } from "../components/HeroSampleQuery";
import { HeroSampleSplitfile } from "../components/HeroSampleSplitfile";
import { HeroConnectionParams } from "../components/HeroConnectionParams";
import { Footer, IconLogoDiscord, marketingTheme } from "@splitgraph/tdesign";

import { Octicon } from "@splitgraph/tdesign";

import CambridgeChicagoJOIN from "@splitgraph/content/marketing/sample-queries/CambridgeChicagoJOIN.mdx";
import NewSocrataDatasets from "@splitgraph/content/marketing/sample-queries/NewSocrataDatasets.mdx";
import QOZTractBigQuery from "@splitgraph/content/marketing/sample-queries/QOZTractBigQuery.mdx";
import PostGISGeoData from "@splitgraph/content/marketing/sample-queries/PostGISGeoData.mdx";

import MongoImport from "@splitgraph/content/marketing/sample-splitfiles/MongoImport.mdx";
import QOZVoteFraction from "@splitgraph/content/marketing/sample-splitfiles/QOZVoteFraction.mdx";
import RDUWeather from "@splitgraph/content/marketing/sample-splitfiles/RDUWeather.mdx";
import UK2017Election from "@splitgraph/content/marketing/sample-splitfiles/UK2017Election.mdx";
import USFlights from "@splitgraph/content/marketing/sample-splitfiles/USFlights.mdx";
import SgrPush from "@splitgraph/content/marketing/sample-commands/SgrPush.mdx";
import CurlRESTAPI from "@splitgraph/content/marketing/sample-commands/CurlRESTAPI.mdx";

import UsingSplitfilesCast from "@splitgraph/content/marketing/lp-casts/UsingSplitfilesCast.mdx";

import {
  IconConceptDataInPalmOfHand,
  IconConceptWorkflowGantChart,
  IconPostgresLogo,
  IconUploadDatabase,
  IconFeatureAutogeneratedAPI,
  IconFeatureContentAddressable,
  IconFeatureCloudStorage,
  IconFeatureCache,
  IconFeatureDeltaCompression,
  IconFeatureIntegrateOtherDatabases,
  IconFeatureLayeredQuerying,
  IconFeaturePeerToPeer,
  IconFeatureProvenance,
  IconFeatureSplitfiles,
  IconFeatureVersioning,
} from "@splitgraph/tdesign";

import { Link } from "@splitgraph/docs/components";

const mdxComponents = {
  pre: ({ children, ...rest }) => (
    <pre sx={marketingTheme.styles.pre} {...rest}>
      {children}
    </pre>
  ),
  code: ({ children, ...rest }) => (
    <code sx={marketingTheme.styles.code} {...rest}>
      {children}
    </code>
  ),
};

const ctaSectionStyle = {
  minWidth: "100%",
  maxWidth: "100%",
  width: "100%",
  backgroundColor: "heavy",
  paddingTop: "3rem",
  paddingBottom: "3rem",
  paddingLeft: ["1rem", "1rem", "3rem"],
  paddingRight: ["1rem", "1rem", "3rem"],
  borderTop: "0.5ch solid",
  borderTopColor: "primary",
  borderBottom: "0.5ch solid",
  borderBottomColor: "primary",
  h2: {
    color: "white",
  },
  ".button-link-secondary": {
    marginBottom: "2rem",
  },
  ".muted-link": {
    variant: "links.muted",
  },
  ".mobile-shrink": {
    fontSize: ["1.2rem", "1.5rem", "2rem"],
    paddingLeft: "1rem",
    paddingRight: "1rem",
  },
};

// todo: rename to benefitPanelStyle, and .feature -> .benefit
const featurePanelStyle = {
  display: "flex",
  color: "primary",
  flexWrap: "wrap",
  justifyContent: "center",
  maxWidth: "90vw",
  WebkitBoxPack: "center",
  ".feature:nth-child(even)": {
    marginRight: [0, "2rem", "4rem"],
    marginLeft: [0, "2rem", "4rem"],
  },
  ".feature": {
    marginBottom: ["4rem", "4rem", 0],
    width: ["100%", "calc(50% - 4rem)", "25%"],
    flexGrow: 0,
    flexShrink: 1,
    minHeight: "200px",
    h3: {
      marginTop: "2rem",
      color: "primary",
    },
    p: {
      textAlign: "justify",
      color: "primary",
    },
    a: {
      variant: "links.primary",
      textDecoration: "underline",
      color: "sgdarkblue",
      alignSelf: "flex-end",
      ":hover": {
        borderBottom: "2px solid",
        borderBottomColor: "accent",
        borderBottom: "3px solid",
      },
    },
  },
};

const featureSectionStyle = {
  color: "primary",
  display: ["inherit", "inherit", "flex"],
  paddingTop: "4rem",
  paddingBottom: "4rem",

  // Note: this is even/odd of all <section> on the page, so which one is first
  // depends on how many sections come before it. If adding a section, may
  // want to flip "odd" and "even" here to make sure first section is gray

  // left list, right header
  ":nth-child(odd)": {
    backgroundColor: "#ebebeb",
    flexDirection: ["inherit", "inherit", "row-reverse"],
    ".feature-section-header": {
      alignItems: ["center", "center", "flex-end"],
      paddingRight: [
        "inherit",
        "inherit",
        "calc((100vw - 120ch)/2)",
        // "max(3rem, calc((100vw - 120ch)/2))", // put this back when the world upgrades firefox
      ],
    },
    ul: {
      paddingRight: ["1rem", "1rem", "inherit"],
      paddingLeft: [
        "1rem",
        "1rem",
        "calc((100vw - 120ch)/2)",
        // "max(3rem, calc((100vw - 120ch)/2))", // put this back when the world upgrades firefox
      ],
    },
    a: {
      textAlign: ["center", "center", "right"],
    },
  },

  // left header, right list
  ":nth-child(even)": {
    backgroundColor: "white",
    flexDirection: ["inherit", "inherit", "row"],
    ".feature-section-header": {
      alignItems: ["center", "center", "flex-start"],
      paddingLeft: [
        "inherit",
        "inherit",
        "calc((100vw - 120ch)/2)",
        // "max(3rem, calc((100vw - 120ch)/2))"
      ],
    },
    ul: {
      paddingLeft: ["1rem", "1rem", "inherit"],
      paddingRight: [
        "1rem",
        "1rem",
        "calc((100vw - 120ch)/2)",
        // "max(3rem, calc((100vw - 120ch)/2))"
      ],
    },
    a: {
      textAlign: ["center", "center", "left"],
    },
  },
  ".feature-section-header": {
    paddingBottom: ["4rem", "4rem", "inherit"],
    color: ["inherit", "inherit", "primary"],
    width: ["inherit", "inherit", "50%"],
    display: "flex",
    // alignItems: "center",
    justifyContent: "center",
    h2: {
      margin: 0,
    },
    "a:not(.noarrow-link)": {
      variant: "links.primary",
      maxWidth: "80%",
      marginTop: "1em",
    },
    ".noarrow-link": {
      variant: "links.primary",
    },
    p: {
      // for when subheading is not a link
      maxWidth: "80%",
      marginTop: "1em",
      textAlign: "center",
    },
    "a:not(.noarrow-link):after": {
      paddingLeft: "1ch",
      paddingRight: "1ch",
      content: '"\\27F6"',
    },
    flexDirection: "column",
  },
  ul: {
    width: ["inherit", "inherit", "50%"],
    paddingTop: 0,
    paddingBottom: 0,
    padding: 0,
    margin: 0,
    textAlign: "left",
    display: "flex",
    flexWrap: "wrap",
    flexDirection: "row",
    justifyContent: "space-between",
    li: {
      width: "100%",
      display: "inline-flex",
      flexDirection: "row",
      alignItems: "center",
      flexGrow: 0,
      flexShrink: 1,
      marginBottom: "1rem",
      marginTop: "1rem",
    },
    ".feature-icon": {
      display: "inline-flex",
      alignItems: "center",
      marginRight: "2rem",
      marginTop: "-1.75rem", // don't count the CTA row in centering
      minWidth: "3rem", // must be size of icon
      'div[class^="sg-icon-"]': {
        display: "inline-flex",
      },
    },
    ".feature-body": {
      display: "flex",
      flexDirection: "column",
      ".feature-heading": {
        fontWeight: "bold",
      },
      ".feature-description": {
        textAlign: "justify",
      },
      ".feature-cta": {
        variant: "links.primary",
        marginTop: "1rem",
        textAlign: "left",
        fontSize: "small",
      },
      ".feature-cta:after": {
        paddingLeft: "1ch",
        paddingRight: "1ch",
        content: '"\\27F6"',
      },
    },
  },
};

const communityLinksStyle = {
  ".community-links-container": {
    display: "flex",
    flexDirection: "row",
    flexWrap: "wrap",
    justifyContent: "center",
    alignItems: "center",
    a: {
      textDecoration: "none",
      ":hover": {
        textDecoration: "underline",
      },
    },
  },
  ".community-link": {
    padding: "1rem",
    margin: "1rem",
    border: "1px solid",
    borderColor: "gray",
    display: "inline-flex",
    alignItems: "center",
    ":hover": {
      borderColor: "secondary",
    },
  },
};

const LandingPage = () => {
  return (
    <LandingPageLayout showMarketingNotice={false}>
      <NextSeo title="Work with data like you work with code" />

      <HeroBox
        extraStyle={{
          display: "flex",
          maxWidth: "100%",
          flexWrap: "wrap",
          flexDirection: ["column", "column", "row-reverse"],
          justifyContent: "center",
          alignItems: "center",
          // paddingTop: ["inherit", "inherit", "2rem"],
          paddingBottom: "2rem",
          WebkitBoxPack: "center",
          // padding: ["inherit", "inherit", "-2rem"],
          ".hero-subsection": {
            flexGrow: 0,
            flexShrink: 1,
            margin: ["inherit", "inherit", "2rem"],
          },
          ".hero-subsection--text": {
            textAlign: "center",
            // alignSelf: "baseline",
            display: "flex",
            flexDirection: "column",
            justifyContent: "space-between",
            alignItems: "center",
            maxWidth: ["90vw", "50vw", "50vw"],
            minWidth: ["90vw", "50vw", "50vw"],
            // marginRight: ["inherit", "inherit", "4rem"],
          },
          ".hero-subsection--splitfile": {
            // marginRight: ["inherit", "inherit", "4rem"],
          },
          ".button-link-secondary": {
            display: ["none", "none", "initial"],
          },
        }}
      >
        <Box
          className="hero-subsection hero-subsection--text"
          sx={{ maxWidth: "50%" }}
        >
          <h1 sx={{ fontWeight: 100, color: "gray" }}>
            Port 5432 is open...
            <br />
            <span sx={{ fontWeight: 400, color: "light" }}>
              Query 40k+ datasets with SQL
            </span>
          </h1>

          <Box
            sx={{
              backgroundColor: "sgdarkblue",
              color: "white",
              minWidth: ["90vw", "60ch", "min(80ch, 100%)"],
              maxWidth: ["90vw", "60ch", "min(80ch, 100%)"],
              // maxWidth: ["90vw", "60ch", "min(80ch, 90%)"],
              // minWidth: ["90vw", "60ch", "min(80ch, 90%)"],
              // minWidth: ["90vw", "60ch", "min(80ch, 100%)"],
              boxShadow: "card",
            }}
          >
            <HeroSampleQuery
              fixedWidth={"100%"}
              queries={[
                {
                  snippet: (
                    <CambridgeChicagoJOIN
                      components={mdxComponents}
                      key={"cambridge_chicago_sql"}
                    />
                  ),
                  description: "Join across tables from live datasets",
                },
                {
                  snippet: (
                    <NewSocrataDatasets
                      components={mdxComponents}
                      key={"new_socrata_datasets"}
                    />
                  ),
                  description:
                    "Travel back in time and query multiple versions at once",
                },
                {
                  snippet: (
                    <QOZTractBigQuery
                      components={mdxComponents}
                      key={"qoz_tract_big_query"}
                    />
                  ),
                  description: "All the features of SQL are available to you ",
                },
                {
                  snippet: (
                    <PostGISGeoData
                      components={mdxComponents}
                      key={"postgis_geodata"}
                    />
                  ),
                  description: "Support for PostGIS and geospatial queries",
                },
              ]}
            />
          </Box>

          <h1 sx={{ fontWeight: 100, color: "gray" }}>
            Connect to the
            <br className="mobile-line-break" />{" "}
            <span sx={{ fontWeight: 400, color: "light" }}>
              Data Delivery Network
            </span>
            <br />
            <span sx={{ fontWeight: 100 }}>with any PostgreSQL client.</span>
          </h1>
        </Box>

        <HeroConnectionParams />

        <br />
      </HeroBox>

      <section
        className="lp-section lp-section--darkgrad"
        sx={{
          // background:
          //   "linear-gradient(180deg, rgba(13,24,33,1) 0%, rgba(54,103,141,1) 50%)",
          backgroundColor: "primary",
          color: "light",
          h2: {
            color: "light",
          },
          borderTop: "0.5ch solid",
          borderTopColor: "primary",
          borderBottom: "0.5ch solid",
          borderBottomColor: "rgba(13,24,33,1)",
          paddingTop: "2rem",
          paddingBottom: "2rem",
          // paddingLeft: "max(3rem, calc((100vw - 120ch)/2))",
          // paddingRight: "max(3rem, calc((100vw - 120ch)/2))",
          paddingLeft: "calc((100vw - 120ch)/2)",
          paddingRight: "calc((100vw - 120ch)/2)",
          ".muted-link": {
            variant: "links.muted",
          },
        }}
      >
        {/* <h2>Explore Public Data</h2> */}
      </section>

      <section
        className="lp-section"
        sx={{
          color: "sgdarkblue",
          background:
            "linear-gradient(180deg, rgba(221,221,223,1) 0%, rgba(255,255,255,1) 72%)",
          paddingLeft: ["1rem", "1rem", "3rem"],
          paddingRight: ["1rem", "1rem", "3rem"],
          paddingBottom: "4rem",
        }}
      >
        <h2>
          What is Splitgraph?
          <br />
          <span sx={{ fontWeight: "200" }}>
            Splitgraph is an integrated
            <br className="mobile-line-break" /> data catalog and database
            proxy.
          </span>
          <br />
          <br />
        </h2>

        <Box sx={featurePanelStyle}>
          <Box className="feature">
            <IconConceptDataInPalmOfHand
              color="primary.main"
              size={"6rem"}
              extraStyle={{ display: "inline-flex" }}
            />
            <h3>Discover Data</h3>
            <p>
              The Splitgraph catalog indexes 40k+ data sources, including both
              live databases and versioned data snapshots called "data images."
              Discover data and explore it with features like an auto-generated
              REST API, schema documentation, and provenance tracking.
            </p>
            <Link href="/explore">Explore the Catalog</Link>
          </Box>

          <Box className="feature">
            <IconFeatureLayeredQuerying
              color="primary.main"
              size={"6rem"}
              extraStyle={{ display: "inline-flex" }}
            />
            <h3>Query Data</h3>
            <p>
              Connect to the Data Delivery Network (DDN) to query the catalog
              like it's a Postgres database. The DDN is a distributed SQL
              caching proxy built on the PostgreSQL wire protocol. It can route
              queries to any data in the catalog, whether that's a live database
              or a specific version of a data image.
            </p>
            <Link href="/connect">Connect Now</Link>
          </Box>

          <Box className="feature">
            <IconUploadDatabase
              size={"6rem"}
              extraStyle={{ display: "inline-flex", color: "red" }}
            />
            <h3>Build & Share Data</h3>
            <p>
              Build versioned datasets from your own data, package them and push
              them to the Splitgraph catalog for other people to discover and
              query. Store the data as column oriented, delta-compressed objects
              in an S3-compatible object store. Push the metadata to Splitgraph
              peers, like Splitgraph.com.
            </p>
            <Link href="/docs/splitgraph-cloud/introduction">
              Learn more about Splitgraph Cloud.
            </Link>
          </Box>
        </Box>
      </section>

      <section
        className="lp-section"
        sx={{
          color: "sgdarkblue",
          backgroundColor: "white",
          paddingLeft: ["1rem", "1rem", "3rem"],
          paddingRight: ["1rem", "1rem", "3rem"],
          paddingBottom: "4rem",
          a: {
            color: "primary",
          },
          ...communityLinksStyle,
        }}
      >
        <h2>Built Around an Open Core</h2>

        <Box className="community-links-container">
          <Link
            href="https://www.github.com/splitgraph/splitgraph"
            className="community-link noarrow-link"
          >
            <Octicon />
            Splitgraph Core at GitHub
          </Link>

          <Link
            href="https://discord.gg/eFEFRKm"
            className="noarrow-link"
            className="community-link"
          >
            <IconLogoDiscord
              size={"2rem"}
              extraStyle={{ marginRight: "1rem" }}
            />
            Community Discord Chat
          </Link>
        </Box>

        <h2 sx={{ fontWeight: 200 }}>
          Splitgraph.com is a hosted service built around Splitgraph Core.
          <br />
          It adds features like a public SQL proxy and data catalog.
        </h2>

        <Box>
          <Link href="/blog/data-delivery-network-launch">
            Read the DDN launch blog post &raquo;
          </Link>
        </Box>
      </section>

      <section
        className="lp-section"
        sx={{
          color: "sgdarkblue",
          backgroundColor: "white",
          paddingLeft: ["1rem", "1rem", "3rem"],
          paddingRight: ["1rem", "1rem", "3rem"],
          paddingBottom: "4rem",
          a: {
            color: "primary",
          },
        }}
      >
        <h2>Discover Data in the Catalog</h2>
        <h2 sx={{ marginTop: "2rem !important", fontWeight: "200" }}>
          We index 40k+ public datasets
          <br className="mobile-line-break" /> & make them queryable with SQL.
        </h2>

        <Box>
          <iframe
            src="/search?embed=1"
            allowtransparency="true"
            style={{
              left: 0,
              top: 0,
              minWidth: "100%",
              width: "100%",
              maxHeight: "calc(4rem + 1rem)",
              height: "calc(4rem + 1rem)",
              minHeight: "calc(4rem + 1rem)",
              border: "none",
              background: "none",
              overflowY: "hidden",
            }}
          />
        </Box>
        <iframe
          src="/explore?embed=1"
          allowtransparency="true"
          style={{
            left: 0,
            top: 0,
            minWidth: "100%",
            width: "100%",
            maxHeight: "calc(300px + 1rem)",
            height: "calc(300px + 1rem)",
            minHeight: "calc(300px + 1rem)",
            border: "none",
            background: "none",
            overflowY: "hidden",
            marginBottom: "1rem",
          }}
        />
        <Link className="muted-link" href="/explore">
          Explore over 40,000 datasets &raquo;
        </Link>
      </section>

      {/* Placeholder section to make the Splitfiles start on the right (due to odd/even) */}
      <section className="lp-section"></section>

      <section className="lp-section lp-cta" sx={ctaSectionStyle}>
        <Link className="button-link-secondary" href="/connect">
          Connect to DDN
        </Link>

        <Link className="muted-link" href="/docs">
          Read the Docs &raquo;
        </Link>
      </section>

      <section
        className="lp-section"
        sx={{
          color: "primary",
          // backgroundColor: "rgba(221,221,223,1)",
          backgroundColor: "white",
          textAlign: "center",
          paddingTop: "4rem",
          // paddingBottom: "4rem",
          margin: 0,
          h2: {
            marginBottom: "1rem !important",
            marginTop: "0 !important",
          },
        }}
      >
        <h2>Build Reproducible Data Snapshots</h2>

        <h2 sx={{ marginTop: "2rem !important", fontWeight: "200" }}>
          Combine data sources into reproducible data "images"
          <br /> using a CI-friendly build process.
        </h2>
      </section>

      <section
        className="lp-feature-section"
        sx={{
          ...featureSectionStyle,
          backgroundColor: "white !important",
          // background:
          //   "linear-gradient(180deg, rgba(221,221,223,1) 0%, rgba(255,255,255,1) 72%)",
        }}
      >
        <Box
          className="feature-section-header"
          sx={{ paddingLeft: ["initial", "initial", "4rem"] }}
        >
          <HeroSampleSplitfile
            splitfiles={[
              {
                snippet: (
                  <RDUWeather components={mdxComponents} key={"RDUWeather"} />
                ),
                description: "Import specific tables from upstream sources",
              },
              {
                snippet: (
                  <UK2017Election
                    components={mdxComponents}
                    key={"UK2017Election"}
                  />
                ),
                description: "Reference upstream sources within SQL queries",
              },
              {
                snippet: (
                  <MongoImport components={mdxComponents} key={"MongoImport"} />
                ),
                description: 'Import from live databases by "mounting" them',
              },
              {
                snippet: (
                  <QOZVoteFraction
                    components={mdxComponents}
                    key={"QOZVoteFraction"}
                  />
                ),
                description: "Easily import from multiple data sources",
              },
              {
                snippet: (
                  <USFlights components={mdxComponents} key={"USFlights"} />
                ),
                description: "Prepare geographc data for easy plotting",
              },
            ]}
          />
        </Box>

        <ul>
          <li>
            <Box className="feature-icon">
              <IconFeatureSplitfiles color="primary.main" size={"3rem"} />
            </Box>
            <Box className="feature-body">
              <span className="feature-heading">Splitfiles</span>
              <span className="feature-description">
                Define transformations on data using a declarative syntax that
                will be familiar to anyone who has written a Dockerfile. Enjoy
                full access to the <tt>SQL</tt> language, and reference other
                Splitgraph data images or foreign tables with a simple{" "}
                <tt>JOIN</tt>.
              </span>
              <Link href="/docs/concepts/splitfiles" className="feature-cta">
                Discover Splitfiles
              </Link>
            </Box>
          </li>

          <li>
            <Box className="feature-icon">
              <IconFeatureProvenance color="primary.main" size={"3rem"} />
            </Box>
            <Box className="feature-body">
              <span className="feature-heading">Provenance</span>
              <span className="feature-description">
                Datasets built with Splitfiles have all their sources recorded,
                meaning Splitgraph knows exactly where your data came from and
                when to rebuild it. Easily stay on top of your data, without
                drifting out of date when upstream data sources change.
              </span>
              <Link
                href="/mildbyte/complex_dataset/latest/-/provenance"
                className="feature-cta"
              >
                See an example of provenance in the catalog
              </Link>
              <Link
                href="/docs/working-with-data/inspecting-provenance"
                className="feature-cta"
              >
                Learn more about provenance
              </Link>
            </Box>
          </li>

          <li>
            <Box className="feature-icon">
              <IconFeatureCache color="primary.main" size={"3rem"} />
            </Box>
            <Box className="feature-body">
              <span className="feature-heading">Caching</span>
              <span className="feature-description">
                Rebuild data only if the sources have changed. Easily integrate
                Splitfiles into your CI pipeline to keep your data up to date
                and only download the changes to upstream datasets.
              </span>
              <Link
                href="/docs/working-with-data/using-splitfiles"
                className="feature-cta"
              >
                See how Splitfiles can fit in your CI pipeline
              </Link>
            </Box>
          </li>

          <li>
            <Box className="feature-icon">
              <IconFeatureVersioning color="primary.main" size={"3rem"} />
            </Box>
            <Box className="feature-body">
              <span className="feature-heading">Data Versioning</span>
              <span className="feature-description">
                Switch between different versions of your data, capture changes,
                send and receive revisions and do it without rewriting any of
                your tools &mdash; just like Git.
              </span>
              <Link
                href="/docs/working-with-data/tracking-changes"
                className="feature-cta"
              >
                Discover how change tracking works
              </Link>
            </Box>
          </li>
        </ul>
      </section>

      <section
        className="lp-section"
        sx={{
          color: "sgdarkblue",
          backgroundColor: "white",
          paddingLeft: ["1rem", "1rem", "3rem"],
          paddingRight: ["1rem", "1rem", "3rem"],
          paddingBottom: "4rem",
          a: {
            color: "primary",
          },
          ".asciinema-embed-container": {
            width: "90vw",
          },
          iframe: {
            background: "transparent !important",
          },
        }}
      >
        <UsingSplitfilesCast components={mdxComponents} />
        <Box
          sx={{
            fontSize: "small",
            display: "flex",
            flexDirection: "row",
            alignItems: "baseline",
            marginTop: "1rem",
            flexWrap: "wrap",
            justifyContent: "center",
          }}
        >
          <Typography sx={{ fontWeight: "800", marginRight: "1rem" }}>
            EXAMPLE
          </Typography>
          <Typography>
            Import data from a CSV, then reference it in a Splitfile to build a
            derivative image.
          </Typography>
        </Box>
      </section>

      <section
        className="lp-section"
        sx={{
          color: "primary",
          // backgroundColor: "rgba(221,221,223,1)",
          backgroundColor: "white",
          textAlign: "center",
          paddingTop: "4rem",
          // paddingBottom: "4rem",
          margin: 0,
          h2: {
            marginBottom: "1rem !important",
            marginTop: "0 !important",
          },
        }}
      >
        <h2>Push Data to Splitgraph</h2>

        <h2 sx={{ marginTop: "2rem !important", fontWeight: "200" }}>
          Push images to Splitgraph using an
          <br /> immutable and content-addressable{" "}
          <br className="mobile-line-break" /> storage format.
        </h2>
      </section>

      <section
        className="lp-feature-section"
        sx={{
          ...featureSectionStyle,
          background:
            "linear-gradient(360deg, rgba(221,221,223,1) 0%, rgba(255,255,255,1) 72%)",
        }}
      >
        <Box className="feature-section-header">
          <h2>Share Data</h2>
          <Link href="/product/data-lifecycle/sharing">
            Share data with peers or push to Splitgraph
          </Link>
        </Box>

        <ul>
          <li>
            <Box className="feature-icon">
              <IconFeaturePeerToPeer color="primary.main" size={"3rem"} />
            </Box>
            <Box className="feature-body">
              <span className="feature-heading">Peer-to-Peer</span>
              <span className="feature-description">
                Any Splitgraph engine can act as a remote peer. Push and pull
                data between Splitgraph installations, or publish it to
                Splitgraph Cloud using the same protocol.
              </span>
              <Link
                href="/docs/getting-started/decentralized-demo"
                className="feature-cta"
              >
                Try a decentralized demo
              </Link>
            </Box>
          </li>

          <li>
            <Box className="feature-icon">
              <IconFeatureAutogeneratedAPI color="primary.main" size={"3rem"} />
            </Box>
            <Box className="feature-body">
              <span className="feature-heading">Auto-generated REST API</span>
              <span className="feature-description">
                Get an instant, auto-generated OpenAPI-compatible REST API for
                every version of your data when you push to Splitgraph Cloud,
                thanks to the power of PostgREST. Query any version of your data
                with a simple HTTP request. More tools coming soon.
              </span>
              <Link
                href="/splitgraph/socrata/latest/-/api-schema"
                className="feature-cta"
              >
                Try the <tt>splitgraph/socrata</tt> REST API
              </Link>
            </Box>
          </li>

          <li>
            <Box className="feature-icon">
              <IconFeatureCloudStorage color="primary.main" size={"3rem"} />
            </Box>
            <Box className="feature-body">
              <span className="feature-heading">
                S3 Compatible Blob Storage
              </span>
              <span className="feature-description">
                Splitgraph stores your data as columnar chunks in any
                S3-compatible object store, and Postgres only needs to keep
                track of lightweight metadata until you're ready to query it.
                Download data only when you need it, without the need for a
                bulky always-on warehouse.
              </span>
              <Link
                href="https://github.com/splitgraph/splitgraph/tree/master/examples/push-to-object-storage"
                className="feature-cta"
              >
                Try an example of pushing to object storage
              </Link>
            </Box>
          </li>
        </ul>
      </section>

      <section
        className="lp-section"
        sx={{
          color: "sgdarkblue",
          backgroundColor: "rgba(221,221,223,1) !important",
          paddingLeft: ["1rem", "1rem", "3rem"],
          paddingRight: ["1rem", "1rem", "3rem"],
          paddingBottom: "4rem",
          a: {
            color: "primary",
          },
        }}
      >
        <Box
          sx={{
            // fontSize: "small",
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
            justifyContent: "center",
            marginTop: "1rem",
            // minWidth: ["90vw", "60ch", "min(80ch, 100%)"],
            // maxWidth: ["90vw", "60ch", "min(80ch, 100%)"],
            h2: {
              marginBottom: "1rem !important",
              marginTop: "0 !important",
            },
          }}
        >
          <Box
            sx={{
              backgroundColor: "sgdarkblue",
              color: "white",
              minWidth: ["90vw", "60ch", "min(80ch, 100%)"],
              maxWidth: ["90vw", "60ch", "min(80ch, 100%)"],
              marginTop: "2rem",
              marginBottom: "2rem",
              boxShadow: "card",
            }}
          >
            <HeroSampleQuery
              fixedWidth={"100%"}
              queries={[
                {
                  snippet: (
                    <SgrPush components={mdxComponents} key={"sgr_push"} />
                  ),
                  description: "Push data to Splitgraph",
                },
                {
                  snippet: (
                    <CurlRESTAPI
                      components={mdxComponents}
                      key={"curl_rest_api"}
                    />
                  ),
                  description: "Every image gets an auto-generated REST API",
                },
              ]}
            />
          </Box>
        </Box>
      </section>

      {/* Placeholder to shift side of next list */}
      <section className="lp-section"></section>

      <section
        className="lp-feature-section"
        sx={{
          ...featureSectionStyle,
          background:
            "linear-gradient(180deg, rgba(221,221,223,1) 0%, rgba(255,255,255,1) 72%)",
        }}
      >
        <Box className="feature-section-header">
          <h2>Store & Query Efficiently</h2>
          <Link href="/product/data-lifecycle/storage">
            Save on storage costs with a columnar format and delta compression.
          </Link>
        </Box>

        <ul>
          <li>
            <Box className="feature-icon">
              <IconFeatureDeltaCompression color="primary.main" size={"3rem"} />
            </Box>
            <Box className="feature-body">
              <span className="feature-heading">Delta Compression</span>
              <span className="feature-description">
                Splitgraph tables are composed of delta compressed objects. Keep
                track of how your data changed through history at low storage
                cost and bring your datasets up to date without redownloading
                them.
              </span>
              <Link href="/docs/concepts/objects" className="feature-cta">
                Learn how Splitgraph stores objects
              </Link>
            </Box>
          </li>

          <li>
            <Box className="feature-icon">
              <IconFeatureContentAddressable
                color="primary.main"
                size={"3rem"}
              />
            </Box>
            <Box className="feature-body">
              <span className="feature-heading">
                Content addressable chunks
              </span>
              <span className="feature-description">
                Splitgraph objects are immutable and content-addressable,
                allowing Splitgraph to automatically deduplicate data and store
                multiple versions efficiently. Focus on what to put into your
                data warehouse, not how to store it.
              </span>
              <Link
                href="/docs/working-with-data/inspecting-images#example"
                className="feature-cta"
              >
                See content addressability in action
              </Link>
            </Box>
          </li>

          <li>
            <Box className="feature-icon">
              <IconFeatureLayeredQuerying color="primary.main" size={"3rem"} />
            </Box>
            <Box className="feature-body">
              <span className="feature-heading">Layered querying</span>
              <span className="feature-description">
                Don't download the whole dataset just to run one <tt>SELECT</tt>
                . Splitgraph lets your software query remote data by lazily
                downloading only the required fragments.
              </span>
              <Link
                href="/docs/large-datasets/layered-querying"
                className="feature-cta"
              >
                Learn about Layered Querying
              </Link>
            </Box>
          </li>
        </ul>
      </section>

      <section
        className="lp-section lp-cta"
        sx={{
          ...ctaSectionStyle,
          "h1,h2": {
            color: "white",
          },
          h1: {
            fontWeight: 800,
            marginBottom: "4rem",
          },
          h2: {
            fontWeight: 200,
          },
        }}
      >
        <h1>Want Splitgraph for your business?</h1>

        <Link
          className="button-link-secondary"
          href="/about/company/private-cloud-beta"
        >
          Contact Us
        </Link>

        <h2>
          We're developing a "Private Cloud" product.
          <br /> Want in on the beta? Get in touch.
        </h2>

        <Link className="muted-link" href="/about/company/private-cloud-beta">
          Read About the Beta &raquo;
        </Link>
      </section>

      <section
        className="lp-section"
        sx={{
          color: "primary",
          // backgroundColor: "rgba(221,221,223,1)",
          backgroundColor: "white",
          textAlign: "center",
          paddingTop: "4rem",
          // paddingBottom: "4rem",
          margin: 0,
          h2: {
            marginBottom: "1rem !important",
            marginTop: "0 !important",
          },
        }}
      >
        <h2>Run Splitgraph Locally</h2>

        <h2 sx={{ marginTop: "2rem !important", fontWeight: "200" }}>
          Run a local Splitgraph Engine <br className="mobile-line-break" />
          on top of Postgres
          <br />
          to mount or clone data into tables.
        </h2>
      </section>

      <section
        className="lp-feature-section"
        sx={{
          ...featureSectionStyle,
          backgroundColor: "white !important",
          // background:
          //   "linear-gradient(360deg, rgba(221,221,223,1) 0%, rgba(255,255,255,1) 72%)",
        }}
      >
        <Box className="feature-section-header">
          <Box
            sx={{
              // fontSize: "small",
              display: "flex",
              flexDirection: "column",
              alignItems: "center",
              justifyContent: "center",
              marginTop: "1rem",
              h2: {
                marginBottom: "1rem !important",
                marginTop: "0 !important",
              },
            }}
          >
            <h2>Powered by Postgres</h2>

            <h2 sx={{ marginTop: "2rem !important", fontWeight: "200" }}>
              Plug into a growing ecosystem.
            </h2>

            <IconPostgresLogo
              size={"6em"}
              extraStyle={{
                display: "inline-flex",
              }}
            />
          </Box>
        </Box>

        <ul>
          <li>
            <Box className="feature-icon">
              <IconFeatureIntegrateOtherDatabases
                color="primary.main"
                size={"3rem"}
              />
            </Box>
            <Box className="feature-body">
              <span className="feature-heading">Ingest data from anywhere</span>
              <span className="feature-description">
                Splitgraph "mounting" is built on Postgres Foreign Data Wrappers
                (FDW). You can "mount" and import data from all major databases.
                You can setup Splitgraph as a Postgres replication client. Or
                you can write a custom mount handler to cover your unique use
                case. Transform the data into a Splitgraph image, or leave it
                as-is and query it on demand.
              </span>
              <Link
                href="/docs/ingesting-data/foreign-data-wrappers/introduction"
                className="feature-cta"
              >
                Read the FDW Documentation
              </Link>
            </Box>
          </li>

          <li>
            <Box className="feature-icon">
              <IconConceptWorkflowGantChart
                color="primary.main"
                size={"3rem"}
              />
            </Box>
            <Box className="feature-body">
              <span className="feature-heading">Keep Your Existing Tools</span>
              <span className="feature-description">
                Anything that works with Postgres will work with Splitgraph. As
                far as your tools are concerned, a Splitgraph image is just
                another Postgres database. You can adopt Splitgraph
                incrementally while keeping your existing workflows and
                benefitting from the Postgres ecosystem.
              </span>
              <Link
                href="/product/splitgraph/integrations"
                className="feature-cta"
              >
                See examples of common integrations
              </Link>
            </Box>
          </li>
        </ul>
      </section>

      <section
        className="lp-section lp-cta"
        sx={{
          ...ctaSectionStyle,
          ...communityLinksStyle,
          h2: {
            color: "white",
            fontWeight: 200,
          },
          ".community-link": {
            ...communityLinksStyle[".community-link"],
            backgroundColor: "white",
            color: "primary",
            ":hover": {
              textDecoration: "none !important",
              backgroundColor: "sglightblue",
            },
          },
        }}
      >
        <Link className="muted-link" href="/explore">
          Explore Data &raquo;
        </Link>

        <Box mb={"2rem"}>&nbsp;</Box>

        <Link className="button-link-secondary" href="/connect">
          Connect to the DDN
        </Link>

        <h2>Join the Community</h2>

        <Box className="community-links-container">
          <Link
            href="https://www.github.com/splitgraph/splitgraph"
            className="community-link noarrow-link"
          >
            <Octicon />
            Splitgraph Core at GitHub
          </Link>

          <Link
            href="https://discord.gg/eFEFRKm"
            className="noarrow-link"
            className="community-link"
          >
            <IconLogoDiscord
              size={"2rem"}
              extraStyle={{ marginRight: "1rem" }}
            />
            Community Discord Chat
          </Link>
        </Box>
      </section>

      <Footer Link={Link} />
    </LandingPageLayout>
  );
};

export default withTheme(LandingPage);
